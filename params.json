{"name":"FakeDb","tagline":"","body":"Fake DB is a simple library to help writing unit tests with objects which are presumably retrieved via an ORM library.\r\n\r\n### What does it do?\r\nWhen you create an instance of FakeDb\r\n\r\n```C#\r\nusing FakeDb;\r\n\r\nvar db = new Db();\r\n```\r\n\r\nAnd then add instances to the appropriate set\r\n\r\n```C#\r\nvar set = db.Set<Person>();\r\n\r\nset.Add(new Person \r\n                  { \r\n                      Firtname = \"Bob\", \r\n                      Address = new Address \r\n                      { \r\n                          Street = \"Fifth Ave\" \r\n                      } \r\n                 });\r\n\r\n```\r\n\r\nIt will\r\n* Assign a unique value to Id property of Person (if there's an Id property).\r\n* Assign a unique value to Id property of all objects in the graph starting from Person (Bob's Address in this example). \r\n* Keeps track of all objects in the graph.\r\nFor example, if code under test performs a query like:\r\n\r\n```C#\r\n_dbContext.Set<Address>.Where(a => a.Street == \"Fifth Ave\");\r\n```\r\n\r\nThe results will include the Address we constructed in property initializer.\r\n\r\n### How to use it with Entity Framework\r\n\r\nFakeDb is not tied to any ORM. It's just a generic object store. Users will have to create the appropriate ORM wrapper around FakeDb's InMemorySet. Here's how to do that for Entity Framework using IDbSet<T> (Some members without an implementation are removed for brevity).\r\n\r\nThis example assumes that we use a generic repository like this.\r\n\r\n```C#\r\n\r\npublic interface IDbContext\r\n{\r\n    IDbSet<T> Set<T>();\r\n}\r\n\r\n```\r\n\r\nCreate a class which implements IDbSet<T> and a constructor to inject an IInMemorySet we retrieve from FakeDb.\r\n\r\n```C#\r\nclass InMemoryDbSet<T>: IDbSet<T> where T : class\r\n{\r\n    readonly FakeDb.IInMemorySet _internalSet;\r\n    public InMemoryDbSet(IInMemorySet internalSet)\r\n    {\r\n        _internalSet = internalSet;\r\n    }\r\n\r\n    public T Add(T entity)\r\n    {\r\n        _internalSet.Add(entity);\r\n        return entity;\r\n    }\r\n\r\n    public T Attach(T entity)\r\n    {\r\n       return entity;\r\n    }\r\n\r\n    public T Remove(T entity)\r\n    {\r\n       if (_internalSet.Remove(entity) == null)\r\n           throw new InvalidOperationException(\"Item does not exist.\");\r\n\r\n       return entity;\r\n    }\r\n\r\n    public IEnumerator<T> GetEnumerator()\r\n    {\r\n        return _internalSet.Items.Cast<T>().GetEnumerator();\r\n    }\r\n\r\n    IEnumerator IEnumerable.GetEnumerator()\r\n    {\r\n       return _internalSet.Items.GetEnumerator();\r\n    }\r\n\r\n    public System.Linq.Expressions.Expression Expression\r\n    {\r\n        get { return _internalSet.Items.Cast<T>().AsQueryable().Expression; }\r\n    }\r\n\r\n    public IQueryProvider Provider\r\n    {\r\n        get { return _internalSet.Items.Cast<T>().AsQueryable().Provider; }\r\n    }\r\n}\r\n```\r\n\r\nCreate an implementation of IDbContext to return InMemoryDbSet<T>. \r\n\r\n```C#\r\nusing FakeDb;\r\n\r\npublic TestDbContext : IDbContext\r\n{\r\n    readonly Db _db = new Db();\r\n\r\n    public IDbSet<T> Set<T>()\r\n    {\r\n        return new InMemoryDbSet<T>(_db.Set<T>());\r\n    }\r\n}\r\n\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}